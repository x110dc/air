#!/usr/bin/env python

import argparse
from os.path import expanduser

from configobj import ConfigObj
from jira.client import JIRA
from sh import svn

# dev mkticket "text goes here"
# dev mkbranch <ticket number> (creates a branch based on a Jira ticket)
# dev start <ticket> (marks ticket as in progress?)

# read config file:
config_file = expanduser('~/.dev.cfg')
config = ConfigObj(config_file)
jira_cfg = config['jira']
svn_cfg = config['svn']

# open Jira connection:
options = {'server': jira_cfg['server']}
jira = JIRA(options,
        basic_auth=(jira_cfg['username'], jira_cfg['password']))


def make_branch(issue):
    summary = issue.fields.summary.replace(' ','_')
    message = 'creating branch for {}'.format(issue.key)
    src = svn_cfg['trunk_url']
    dest = '{}{}_{}'.format(svn_cfg['branch_url'], issue.key, summary)

    process = svn.copy(src, dest, m=message)

    if process.exit_code:
        print process.stderr

    print process.stdout


def create_ticket(summary):

    new_issue = jira.create_issue(
                project={'key': jira_cfg['project']},
                summary=summary,
                description=summary,
                components=[{'id': '10301', 'name': 'Server Engineering'}],
                assignee={'name': jira_cfg['username']},
                issuetype={'name': 'Bug'})
    return new_issue.key


def get_ticket(ticket):
    return jira.issue('{}-{}'.format(jira_cfg['project'], ticket))


def main():

    # shamelessly stolen from:
    # http://stackoverflow.com/questions/362426/implementing-a-command-action-parameter-style-command-line-interfaces
    arger = argparse.ArgumentParser()

    arger.add_argument('-v', '--verbose', action='count', default=0)

    subparsers = arger.add_subparsers(dest='command')

    mkticket_parser = subparsers.add_parser('mkticket')
    mkticket_parser.add_argument('text')

    mkbranch_parser = subparsers.add_parser('mkbranch')
    mkbranch_parser.add_argument('ticket')

    opts = arger.parse_args()

    if opts.command == 'mkticket':
        ticket = create_ticket(opts.text)
        print 'ticket created: {}'.format(ticket)
    elif opts.command == 'mkbranch':
        issue = get_ticket(opts.ticket)
        make_branch(issue)


if __name__ == '__main__':
    main()
